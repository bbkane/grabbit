name: Go build and release

on:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:

  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KEY_GITHUB_GORELEASER_TO_HOMEBREW_TAP: ${{ secrets.KEY_GITHUB_GORELEASER_TO_HOMEBREW_TAP }}

  # # goreleaser does all of this AND updates the homebrew formula
  # build:
  #   name: Build
  #   # https://docs.github.com/en/github/setting-up-and-managing-billing-and-payments-on-github/about-billing-for-github-actions
  #   # linux is the cheapest - even if this is free...
  #   runs-on: ubuntu-latest
  #   steps:

  #     - name: Set up Go 1.x
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: ^1.13
  #         id: go

  #     - name: Check out code into the Go module directory
  #       uses: actions/checkout@v2

  #       # https://github.com/actions/cache/blob/main/examples.md#go---modules
  #     - name: Cache dependencies
  #       uses: actions/cache@v2
  #       with:
  #         path: ~/go/pkg/mod
  #         key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #         restore-keys: |
  #           ${{ runner.os }}-go-

  #     - name: Get dependencies
  #       run: go get -v -t -d ./...

  #     - name: Test
  #       run: go test -v .

  #     - name: Build for Mac
  #       run: go build -v .
  #       env:
  #         CGO_ENABLED: 0
  #         GOOS: darwin
  #         GOARCH: amd64

  #         # https://github.com/actions/upload-release-asset#example-workflow---upload-a-release-asset
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         with:
  #           tag_name: ${{ github.ref }}
  #           release_name: Release ${{ github.ref }}
  #           draft: false
  #           prerelease: false

  #     - name: Upload Release Asset
  #       id: upload-release-asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         with:
  #           upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
  #           asset_path: ./grabbit
  #           asset_name: grabbit
  #           asset_content_type: application/octet-stream
